
#include "weno.h"
#include "types.h"



void computePolyCoefs( str_weno &weno, str_dom const &dom, Array<FP> const &sten ) {
  weno.polyCoefs = 0;

  //Reconstruct the lower-order polynomials
  for (int p=0; p<dom.hs+1; p++) {
    for (int i=0; i<dom.hs+1; i++) {
      weno.polyCoefs(p,i) = 0;
      for (int s=0; s<dom.hs+1; s++) {
        weno.polyCoefs(p,i) += weno.recon(p,s,i) * sten(s);
      }
    }
  }

  //Reconstruct the higher-order polynomial
  for (int i=0; i<dom.ord; i++) {
    weno.polyCoefs(dom.hs+1,i) = 0;
    for (int s=0; s<dom.ord; s++) {
      weno.polyCoefs(dom.hs+1,i) += weno.recon(dom.hs+1,s,i) * sten(s);
    }
  }

  //Compute the bridge polynomial
  for (int p=0; p<dom.hs+1; p++) {
    for (int i=0; i<dom.hs+1; i++) {
      weno.polyCoefs(dom.hs+1,i) -= weno.idl(p)*weno.polyCoefs(p,i);
    }
  }
  for (int i=0; i<dom.ord; i++) {
    weno.polyCoefs(dom.hs+1,i) /= weno.idl(dom.hs+1);
  }
}



void computeWenoWeights( str_weno &weno, str_dom const &dom ) {
  //Compute the TV of the lower and higher-order polynomials
  for (int p=0; p<dom.hs+1; p++) {
    weno.tv(p) = computeTV( &weno.polyCoefs(p,0) , dom.hs+1 );
  }
  weno.tv(dom.hs+1) = computeTV( &weno.polyCoefs(dom.hs+1,0) , dom.ord );

  //Handicap the bridge polynomial TV to be closer to the TV of the lower-ordered polynomials
  FP lo_avg = 0;
  for (int i=0; i<dom.hs+1; i++) {
    lo_avg += weno.tv(i);
  }
  lo_avg /= (dom.hs+1);
  weno.tv(dom.hs+1) = lo_avg + ( weno.tv(dom.hs+1) - lo_avg ) * weno.sigma;

  //WENO weights are proportional to the inverse of TV**2
  for (int p=0; p<dom.hs+2; p++) {
    weno.wts(p) = weno.idl(p) / ( weno.tv(p)*weno.tv(p) + weno.eps );
  }

  //convexify
  convexify( weno.wts , dom.hs+2 , weno.eps );

  //Map the weights
  mapWeights( dom.hs+2 , weno.idl , weno.wts );

  //convexify
  convexify( weno.wts , dom.hs+2 , weno.eps );
}



void computeWenoCoefs( str_weno &weno, str_dom const &dom ) {
  //Form the WENO coefficients
  weno.limCoefs = 0;
  for (int p=0; p<dom.hs+2; p++) {
    for (int i=0; i<dom.ord; i++) {
      weno.limCoefs(i) += weno.wts(p) * weno.polyCoefs(p,i);
    }
  }
}



inline void convexify(Array<FP> &wts, int const n, FP const eps) {
  FP wtsSum = 0;
  for (int p=0; p<n; p++) {
    wtsSum += wts(p);
  }
  for (int p=0; p<n; p++) {
    wts(p) /= ( wtsSum + eps );
  }
}



inline void mapWeights( int const n , Array<FP> const &idl , Array<FP> &wts ) {
  //Map the weights for quicker convergence. WARNING: Ideal weights must be (0,1) before mapping!
  for (int p=0; p<n; p++) {
    wts(p) = wts(p) * ( idl(p) + idl(p)*idl(p) - 3.*idl(p)*wts(p) + wts(p)*wts(p) ) / ( idl(p)*idl(p) + wts(p) * ( 1. - 2. * idl(p) ) );
  }
}



inline FP computeTV(FP *a, int n) {
  FP tv;
  if        (n == 2) {
    tv=1.0000000000000000000000000000000000000*(a[1]*a[1]);
  } else if (n == 3) {
    tv=1.0000000000000000000000000000000000000*(a[1]*a[1])+4.3333333333333333333333333333333333333*(a[2]*a[2]);
  } else if (n == 4) {
    tv=1.0000000000000000000000000000000000000*(a[1]*a[1])+4.3333333333333333333333333333333333333*(a[2]*a[2])+0.50000000000000000000000000000000000000*a[1]*a[3]+39.000000000000000000000000000000000000*(a[3]*a[3]);
  } else if (n == 5) {
    tv=1.0000000000000000000000000000000000000*(a[1]*a[1])+4.3333333333333333333333333333333333333*(a[2]*a[2])+0.50000000000000000000000000000000000000*a[1]*a[3]+39.112500000000000000000000000000000000*(a[3]*a[3])+4.2000000000000000000000000000000000000*a[2]*a[4]+625.80000000000000000000000000000000000*(a[4]*a[4]);
  } else if (n == 6) {
    tv=1.0000000000000000000000000000000000000*(a[1]*a[1])+4.3333333333333333333333333333333333333*(a[2]*a[2])+0.50000000000000000000000000000000000000*a[1]*a[3]+39.112500000000000000000000000000000000*(a[3]*a[3])+4.2000000000000000000000000000000000000*a[2]*a[4]+625.80000000000000000000000000000000000*(a[4]*a[4])+0.12500000000000000000000000000000000000*a[1]*a[5]+63.000000000000000000000000000000000000*a[3]*a[5]+15645.000000000000000000000000000000000*(a[5]*a[5]);
  } else if (n == 7) {
    tv=1.0000000000000000000000000000000000000*(a[1]*a[1])+4.3333333333333333333333333333333333333*(a[2]*a[2])+0.50000000000000000000000000000000000000*a[1]*a[3]+39.112500000000000000000000000000000000*(a[3]*a[3])+4.2000000000000000000000000000000000000*a[2]*a[4]+625.83571428571428571428571428571428571*(a[4]*a[4])+0.12500000000000000000000000000000000000*a[1]*a[5]+63.066964285714285714285714285714285714*a[3]*a[5]+15645.892857142857142857142857142857143*(a[5]*a[5])+1.5535714285714285714285714285714285714*a[2]*a[6]+1513.6071428571428571428571428571428571*a[4]*a[6]+563252.14285714285714285714285714285714*(a[6]*a[6]);
  } else if (n == 8) {
    tv=1.0000000000000000000000000000000000000*(a[1]*a[1])+4.3333333333333333333333333333333333333*(a[2]*a[2])+0.50000000000000000000000000000000000000*a[1]*a[3]+39.112500000000000000000000000000000000*(a[3]*a[3])+4.2000000000000000000000000000000000000*a[2]*a[4]+625.83571428571428571428571428571428571*(a[4]*a[4])+0.12500000000000000000000000000000000000*a[1]*a[5]+63.066964285714285714285714285714285714*a[3]*a[5]+15645.892857142857142857142857142857143*(a[5]*a[5])+1.5535714285714285714285714285714285714*a[2]*a[6]+1513.6071428571428571428571428571428571*a[4]*a[6]+563252.14285714285714285714285714285714*(a[6]*a[6])+0.031250000000000000000000000000000000000*a[1]*a[7]+32.625000000000000000000000000000000000*a[3]*a[7]+52976.250000000000000000000000000000000*a[5]*a[7]+2.7599355000000000000000000000000000000e7*(a[7]*a[7]);
  } else if (n == 9) {
    tv=1.0000000000000000000000000000000000000*(a[1]*a[1])+4.3333333333333333333333333333333333333*(a[2]*a[2])+0.50000000000000000000000000000000000000*a[1]*a[3]+39.112500000000000000000000000000000000*(a[3]*a[3])+4.2000000000000000000000000000000000000*a[2]*a[4]+625.83571428571428571428571428571428571*(a[4]*a[4])+0.12500000000000000000000000000000000000*a[1]*a[5]+63.066964285714285714285714285714285714*a[3]*a[5]+15645.903707837301587301587301587301587*(a[5]*a[5])+1.5535714285714285714285714285714285714*a[2]*a[6]+1513.6279761904761904761904761904761905*a[4]*a[6]+563252.53348214285714285714285714285714*(a[6]*a[6])+0.031250000000000000000000000000000000000*a[1]*a[7]+32.643229166666666666666666666666666667*a[3]*a[7]+52976.979166666666666666666666666666667*a[5]*a[7]+2.7599374140625000000000000000000000000e7*(a[7]*a[7])+0.51388888888888888888888888888888888889*a[2]*a[8]+1044.5833333333333333333333333333333333*a[4]*a[8]+2.5428950000000000000000000000000000000e6*a[6]*a[8]+1.7663599450000000000000000000000000000e9*(a[8]*a[8]);
  }
  return tv;
}
